Q.WAP to Implement doubly link list with primitive operations Create a doubly linked list.Insert a new node to the left of the node.Delete the node based on a specific valueDisplay the contents of the list

Program -

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void append(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

void insertLeft(Node** head, int target, int data) {
    Node* temp = *head;
    while (temp != NULL && temp->data != target) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Target node not found.\n");
        return;
    }
    Node* newNode = createNode(data);
    newNode->next = temp;
    newNode->prev = temp->prev;
    if (temp->prev != NULL) {
        temp->prev->next = newNode;
    } else {
        *head = newNode;
    }
    temp->prev = newNode;
}

void deleteNode(Node** head, int value) {
    Node* temp = *head;
    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Node with value %d not found.\n", value);
        return;
    }
    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    } else {
        *head = temp->next;
    }
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }
    free(temp);
    printf("Node with value %d deleted.\n", value);
}

void display(Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    Node* temp = head;
    printf("List contents: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    Node* head = NULL;
    int choice, value, target;

    do {
        printf("\n--- Doubly Linked List Operations ---\n");
        printf("1. Append a node\n");
        printf("2. Insert to the left of a node\n");
        printf("3. Delete a node\n");
        printf("4. Display the list\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to append: ");
                scanf("%d", &value);
                append(&head, value);
                break;

            case 2:
                printf("Enter the target value: ");
                scanf("%d", &target);
                printf("Enter value to insert to the left of %d: ", target);
                scanf("%d", &value);
                insertLeft(&head, target, value);
                break;

            case 3:
                printf("Enter value of the node to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;

            case 4:
                display(head);
                break;

            case 5:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}



Output - 

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 1
Enter value to append: 2

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 1
Enter value to append: 3

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 1
Enter value to append: 4

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 4
List contents: 2 3 4

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 2
Enter the target value: 2
Enter value to insert to the left of 2: 1

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 4
List contents: 1 2 3 4

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 3
Enter value of the node to delete: 1
Node with value 1 deleted.

--- Doubly Linked List Operations ---
1. Append a node
2. Insert to the left of a node
3. Delete a node
4. Display the list
5. Exit
Enter your choice: 4
List contents: 2 3 4
