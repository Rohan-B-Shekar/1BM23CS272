
Q.Write a program to traverse a graph using BFS method.

Program -

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Queue {
    int items[MAX];
    int front, rear;
};

void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isEmpty(struct Queue* q) {
    return (q->front == -1);
}

void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue is full\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
}

int dequeue(struct Queue* q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
        q->front = q->rear = -1;
    }
    return item;
}

void BFS(int graph[MAX][MAX], int startVertex, int numVertices) {
    struct Queue q;
    initQueue(&q);

    int visited[MAX] = {0};

    printf("BFS Traversal starting from vertex %d: ", startVertex);

    enqueue(&q, startVertex);
    visited[startVertex] = 1;

    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);

        for (int i = 0; i < numVertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                enqueue(&q, i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int graph[MAX][MAX], numVertices, startVertex;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the adjacency matrix of the graph (row by row):\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            printf("Enter edge between vertex %d and vertex %d (0 or 1): ", i, j);
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the starting vertex (0 to %d): ", numVertices - 1);
    scanf("%d", &startVertex);

    BFS(graph, startVertex, numVertices);

    return 0;
}





Output - 
Enter the number of vertices: 4
Enter the adjacency matrix of the graph (row by row):
Enter edge between vertex 0 and vertex 0 (0 or 1): 0
Enter edge between vertex 0 and vertex 1 (0 or 1): 1
Enter edge between vertex 0 and vertex 2 (0 or 1): 0
Enter edge between vertex 0 and vertex 3 (0 or 1): 0
Enter edge between vertex 1 and vertex 0 (0 or 1): 1
Enter edge between vertex 1 and vertex 1 (0 or 1): 0
Enter edge between vertex 1 and vertex 2 (0 or 1): 1
Enter edge between vertex 1 and vertex 3 (0 or 1): 0
Enter edge between vertex 2 and vertex 0 (0 or 1): 0
Enter edge between vertex 2 and vertex 1 (0 or 1): 1
Enter edge between vertex 2 and vertex 2 (0 or 1): 0
Enter edge between vertex 2 and vertex 3 (0 or 1): 1
Enter edge between vertex 3 and vertex 0 (0 or 1): 0
Enter edge between vertex 3 and vertex 1 (0 or 1): 0
Enter edge between vertex 3 and vertex 2 (0 or 1): 1
Enter edge between vertex 3 and vertex 3 (0 or 1): 0
Enter the starting vertex (0 to 3): 1
BFS Traversal starting from vertex 1: 1 0 2 3 
