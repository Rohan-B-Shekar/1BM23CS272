Q. WAP to Implement Single Link List to simulate Stack & Queue Operations.


Program -
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void push(struct Node** top, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *top;
    *top = newNode;
    printf("Pushed %d onto the stack.\n", data);
}

int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow! Cannot pop.\n");
        return -1;
    }
    struct Node* temp = *top;
    int poppedData = temp->data;
    *top = temp->next;
    free(temp);
    return poppedData;
}

void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* newNode = createNode(data);
    if (*rear == NULL) {
        *front = *rear = newNode;
        printf("Enqueued %d into the queue.\n", data);
        return;
    }
    (*rear)->next = newNode;
    *rear = newNode;
    printf("Enqueued %d into the queue.\n", data);
}

int dequeue(struct Node** front) {
    if (*front == NULL) {
        printf("Queue underflow! Cannot dequeue.\n");
        return -1;
    }
    struct Node* temp = *front;
    int dequeuedData = temp->data;
    *front = temp->next;
    if (*front == NULL) {
        *front = NULL;
    }
    free(temp);
    return dequeuedData;
}

void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* stackTop = NULL;
    struct Node* queueFront = NULL;
    struct Node* queueRear = NULL;
    int choice, data;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Push onto Stack\n");
        printf("2. Pop from Stack\n");
        printf("3. Display Stack\n");
        printf("4. Enqueue into Queue\n");
        printf("5. Dequeue from Queue\n");
        printf("6. Display Queue\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &data);
                push(&stackTop, data);
                break;
            case 2:
                data = pop(&stackTop);
                if (data != -1) {
                    printf("Popped: %d\n", data);
                }
                break;
            case 3:
                printf("Stack: ");
                displayList(stackTop);
                break;
            case 4:
                printf("Enter the element to enqueue: ");
                scanf("%d", &data);
                enqueue(&queueFront, &queueRear, data);
                break;
            case 5:
                data = dequeue(&queueFront);
                if (data != -1) {
                    printf("Dequeued: %d\n", data);
                }
                break;
            case 6:
                printf("Queue: ");
                displayList(queueFront);
                break;
            case 7:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}


Output - 
Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 1
Enter the element to push: 4
Pushed 4 onto the stack.

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 1
Enter the element to push: 5
Pushed 5 onto the stack.

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 1
Enter the element to push: 6
Pushed 6 onto the stack.

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 3
Stack: 6 -> 5 -> 4 -> NULL

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 2
Popped: 6

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 3
Stack: 5 -> 4 -> NULL

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 4
Enter the element to enqueue: 5
Enqueued 5 into the queue.

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 4
Enter the element to enqueue: 8
Enqueued 8 into the queue.

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 4
Enter the element to enqueue: 9
Enqueued 9 into the queue.

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 6
Queue: 5 -> 8 -> 9 -> NULL

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice:
5
Dequeued: 5

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice: 6
Queue: 8 -> 9 -> NULL

Menu:
1. Push onto Stack
2. Pop from Stack
3. Display Stack
4. Enqueue into Queue
5. Dequeue from Queue
6. Display Queue
7. Exit
Enter your choice:
