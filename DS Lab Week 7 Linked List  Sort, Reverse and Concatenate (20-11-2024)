Q. WAP to Implement Single Link List with following operations: Sort the linked list, Reverse the linked list, Concatenation of two linked lists

Program - 

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

void sortList(struct Node** head) {
    if (*head == NULL) return;

    struct Node* i = *head;
    while (i != NULL) {
        struct Node* j = i->next;
        while (j != NULL) {
            if (i->data > j->data) {
                int temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
            j = j->next;
        }
        i = i->next;
    }
}

void reverseList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

void concatenateLists(struct Node** head1, struct Node** head2) {
    if (*head1 == NULL) {
        *head1 = *head2;
        return;
    }

    struct Node* temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = *head2;
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    int choice, value, n, i;

    do {
        printf("\nMenu:\n");
        printf("1. Insert into List 1\n");
        printf("2. Insert into List 2\n");
        printf("3. Display List 1\n");
        printf("4. Display List 2\n");
        printf("5. Sort List 1\n");
        printf("6. Reverse List 1\n");
        printf("7. Concatenate List 2 into List 1\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter number of elements to insert in List 1: ");
                scanf("%d", &n);
                for (i = 0; i < n; i++) {
                    printf("Enter value: ");
                    scanf("%d", &value);
                    insertEnd(&list1, value);
                }
                break;

            case 2:
                printf("Enter number of elements to insert in List 2: ");
                scanf("%d", &n);
                for (i = 0; i < n; i++) {
                    printf("Enter value: ");
                    scanf("%d", &value);
                    insertEnd(&list2, value);
                }
                break;

            case 3:
                printf("List 1: ");
                displayList(list1);
                break;

            case 4:
                printf("List 2: ");
                displayList(list2);
                break;

            case 5:
                sortList(&list1);
                printf("List 1 sorted.\n");
                break;

            case 6:
                reverseList(&list1);
                printf("List 1 reversed.\n");
                break;

            case 7:
                concatenateLists(&list1, &list2);
                printf("List 2 concatenated into List 1.\n");
                break;

            case 8:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 8);

    return 0;
}


Output -

\
Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 1
Enter number of elements to insert in List 1: 4
Enter value: 1
Enter value: 2
Enter value: 3
Enter value: 4

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 2
Enter number of elements to insert in List 2: 2
Enter value: 6
Enter value: 7

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 3
List 1: 1 -> 2 -> 3 -> 4 -> NULL

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 4
List 2: 6 -> 7 -> NULL

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 5
List 1 sorted.

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 6
List 1 reversed.

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 3
List 1: 4 -> 3 -> 2 -> 1 -> NULL

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 7
List 2 concatenated into List 1.

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice: 3
List 1: 4 -> 3 -> 2 -> 1 -> 6 -> 7 -> NULL

Menu:
1. Insert into List 1
2. Insert into List 2
3. Display List 1
4. Display List 2
5. Sort List 1
6. Reverse List 1
7. Concatenate List 2 into List 1
8. Exit
Enter your choice:

